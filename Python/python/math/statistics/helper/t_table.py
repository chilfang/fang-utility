import math
from math_util import basic

one_tail = {
#1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 60 120 1000
	"0.1" : (1.282, 3.078, 1.886, 1.638, 1.533, 1.476, 1.44, 1.415, 1.397, 1.383, 1.372, 1.363, 1.356, 1.35, 1.345, 1.341, 1.337, 1.333, 1.33, 1.328, 1.325, 1.323, 1.321, 1.319, 1.318, 1.316, 1.315, 1.314, 1.313, 1.311, 1.31, 1.296, 1.289, 1.282),
	"0.05" : (1.645, 6.314, 2.92, 2.353, 2.132, 2.015, 1.943, 1.895, 1.86, 1.833, 1.812, 1.796, 1.782, 1.771, 1.761, 1.753, 1.746, 1.74, 1.734, 1.729, 1.725, 1.721, 1.717, 1.714, 1.711, 1.708, 1.706, 1.703, 1.701, 1.699, 1.697, 1.671, 1.658, 1.646),
	"0.025" : (1.96, 12.706, 4.303, 3.182, 2.776, 2.571, 2.447, 2.365, 2.306, 2.262, 2.228, 2.201, 2.179, 2.16, 2.145, 2.131, 2.12, 2.11, 2.101, 2.093, 2.086, 2.08, 2.074, 2.069, 2.064, 2.06, 2.056, 2.052, 2.048, 2.045, 2.042, 2, 1.98, 1.962),
	"0.01" : (2.326, 31.821, 6.965, 4.541, 3.747, 3.365, 3.143, 2.998, 2.896, 2.821, 2.764, 2.718, 2.681, 2.65, 2.624, 2.602, 2.583, 2.567, 2.552, 2.539, 2.528, 2.518, 2.508, 2.5, 2.492, 2.485, 2.479, 2.473, 2.467, 2.462, 2.457, 2.39, 2.358, 2.33),
	"0.005" : (2.576, 63.656, 9.925, 5.841, 4.604, 4.032, 3.707, 3.499, 3.355, 3.25, 3.169, 3.106, 3.055, 3.012, 2.977, 2.947, 2.921, 2.898, 2.878, 2.861, 2.845, 2.831, 2.819, 2.807, 2.797, 2.787, 2.779, 2.771, 2.763, 2.756, 2.75, 2.66, 2.617, 2.581),
	"0.001" : (3.091, 318.289, 22.328, 10.214, 7.173, 5.894, 5.208, 4.785, 4.501, 4.297, 4.144, 4.025, 3.93, 3.852, 3.787, 3.733, 3.686, 3.646, 3.61, 3.579, 3.552, 3.527, 3.505, 3.485, 3.467, 3.45, 3.435, 3.421, 3.408, 3.396, 3.385, 3.232, 3.16, 3.098),
	"0.0005" : (3.291, 636.578, 31.6, 12.924, 8.61, 6.869, 5.959, 5.408, 5.041, 4.781, 4.587, 4.437, 4.318, 4.221, 4.14, 4.073, 4.015, 3.965, 3.922, 3.883, 3.85, 3.819, 3.792, 3.768, 3.745, 3.725, 3.707, 3.689, 3.674, 3.66, 3.646, 3.46, 3.373, 3.3)
}

def _refine_freedom_units(freedom_units):
	extras = (30, 60, 120, 1000)
	
	if freedom_units > 30:
		for i in range(len(extras)):
			if i == extras[-1]:
				freedom_units = extras[-1]
				break
				
			freedom_units = basic.round_to_closer(freedom_units, extras[i], extras[i + 1])
			if freedom_units == extras[i]: break
	
	return freedom_units


def get_one_tail(confidence_interval, freedom_units):
	"""
	:param confidence_interval:
		If the confidence interval was 95%, the unconfident interval would be 2.5% or 0.025
	:param freedom_units:
		Sample size minus 1
	:return:
	
	"""
	unconfident_interval = 1 - confidence_interval
	unconfident_interval = float("{:.4f}".format(unconfident_interval / 2))
	
	freedom_units = _refine_freedom_units(freedom_units)
	
	return one_tail[str(unconfident_interval)][freedom_units]